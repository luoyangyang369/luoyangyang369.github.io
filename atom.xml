<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洋洋&#39;s Blog</title>
  
  <subtitle>Saty Hungry，Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-31T12:13:50.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YangYang Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录一次小程序开发</title>
    <link href="http://yoursite.com/2019/10/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/10/31/小程序项目记录/</id>
    <published>2019-10-31T07:25:25.000Z</published>
    <updated>2019-10-31T12:13:50.773Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次小程序开发，出现的坑以及一些知识</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>openID：不同APP不同openID。用户唯一标识，跟人一一对应，小程序分配给每个人的ID  OpenID = 用户微信号 &amp; 公众平台APPID（两个数据加密得到的字符串）  不同公众号不同ID</p></li><li><p>unionID：即使不同应用，ID一样。通过获取用户基本信息接口，开发者可通过OpenID来获取用户基本信息</p></li><li><p>appID(小程序ID):它其实就是小程序的「身份证号码」</p></li><li><p>AppSecret(小程序密钥)</p></li><li><p>PV：分享给了多少人</p></li><li><p>UV：分享的课程被多少人打开</p></li><li><p>openGid：小程序的群唯一标识的id</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次小程序开发，出现的坑以及一些知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>腾讯COS项目记录</title>
    <link href="http://yoursite.com/2019/10/30/%E8%85%BE%E8%AE%AFCOS/"/>
    <id>http://yoursite.com/2019/10/30/腾讯COS/</id>
    <published>2019-10-30T07:25:25.000Z</published>
    <updated>2019-10-30T08:39:45.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="https-github-com-tencentyun-qcloud-cos-sts-sdk-tree-master-nodejs"><a href="#https-github-com-tencentyun-qcloud-cos-sts-sdk-tree-master-nodejs" class="headerlink" title="https://github.com/tencentyun/qcloud-cos-sts-sdk/tree/master/nodejs"></a><a href="https://github.com/tencentyun/qcloud-cos-sts-sdk/tree/master/nodejs" target="_blank" rel="noopener">https://github.com/tencentyun/qcloud-cos-sts-sdk/tree/master/nodejs</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;https-github-com-tencentyun-qcloud-cos-sts-sdk-tree-master-nodejs&quot;&gt;&lt;a href=&quot;#https-github-com-tencentyun-qcloud-cos-sts-sdk-tree-mas
      
    
    </summary>
    
    
      <category term="多媒体" scheme="http://yoursite.com/categories/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
    
      <category term="多媒体" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>MySQL深入浅出索引</title>
    <link href="http://yoursite.com/2019/10/30/MySQL%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2019/10/30/MySQL索引/</id>
    <published>2019-10-30T07:25:25.000Z</published>
    <updated>2019-10-31T12:19:03.574Z</updated>
    
    <content type="html"><![CDATA[<p>一句话简单来说，<strong>索引的出现其实就是为了提高数据查询的效率</strong>，就像书的目录一样。<br>一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。</p><a id="more"></a><h2 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h2><p>索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。</p><ul><li>哈希表</li></ul><p>哈希表这种结构<strong>适用于只有等值查询</strong>的场景，比如 Memcached 及其他一些 NoSQL 引擎</p><ul><li>有序数组</li></ul><p>在<strong>等值查询和范围查询</strong>场景中的性能就都非常优秀</p><p>如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。</p><p>所以，有序数组索引<strong>只适用于静态存储引擎</strong>，比如你要保存的是 2017 年某个城市的所有人口信息，这类不会再修改的数据。</p><ul><li>二叉搜索树</li></ul><p>特点：每个节点的左儿子小于父节点，父节点又小于右儿子。</p><p>当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，<strong>更新的时间复杂度</strong>也是 O(log(N))。</p><p>树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。</p><p>你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。</p><p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。</p><p>以 InnoDB 的一个整数字段索引为例，<strong>这个 N 差不多是 1200</strong>。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。</p><h2 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h2><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。</p><p>每一个索引在 InnoDB 里面对应一棵 B+ 树。</p><p>假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引。</p><p>这个表的建表语句是：</p><pre><code>mysql&gt; create table T(id int primary key, k int not null, name varchar(16),index (k))engine=InnoDB;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一句话简单来说，&lt;strong&gt;索引的出现其实就是为了提高数据查询的效率&lt;/strong&gt;，就像书的目录一样。&lt;br&gt;一本 500 页的书，如果你想快速找到其中的某一个知识点，在不借助目录的情况下，那我估计你可得找一会儿。同样，对于数据库的表而言，索引其实就是它的“目录”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="索引" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>vim常用操作</title>
    <link href="http://yoursite.com/2019/10/30/vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/10/30/vim常用操作/</id>
    <published>2019-10-30T01:48:05.000Z</published>
    <updated>2019-10-30T01:54:22.102Z</updated>
    
    <content type="html"><![CDATA[<p>vim  工作常用命令</p><a id="more"></a><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><pre><code>i → Insert 模式，按 ESC 回到 Normal 模式.x → 删当前光标所在的一个字符。dd → 删除当前行，并把删除的行存到剪贴板里p → 粘贴剪贴板normal模式下：插入：a → 在光标后插入  o → 在当前行后插入一个新行  O → 在当前行前插入一个新行  cw → 替换从光标所在位置后到一个单词结尾的字符移动光标：0 → 数字零，到行头    ^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）$ → 到本行行尾    g_ → 到本行最后一个不是blank字符的位置。/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）拷贝/粘贴：P → 粘贴  p是表示在当前位置之后，P表示在当前位置之前yy → 拷贝当前行当行于 ddPgg → 到第一行。G → 到最后一行。w → 到下一个单词的开头。e → 到下一个单词的结尾。查找命令：/text　　查找text，n下一个，N前一个?text　　查找text，反向查找，n下一个，N前一个替换命令ra 将当前字符替换为a，当期字符即光标所在字符。:s/old/new/ 用old替换new，替换当前行的第一个匹配:s/old/new/g 用old替换new，替换当前行的所有匹配:%s/old/new/ 用old替换new，替换所有行的第一个匹配:%s/old/new/g 用old替换new，替换整个文件的所有匹配撤销与重做u           撤销（Undo）U           撤销对整行的操作Ctrl + r    重做（Redo），即撤销的撤销ZZ 保存并退出:q! 强制退出并忽略所有更改:e! 放弃所有修改，并打开原来文件</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim  工作常用命令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2019/10/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/10/30/Linux常用命令/</id>
    <published>2019-10-30T01:23:05.000Z</published>
    <updated>2019-11-01T07:29:22.609Z</updated>
    
    <content type="html"><![CDATA[<p>git  工作常用命令</p><a id="more"></a><h2 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h2><pre><code>md5sum 计算文件md5值，对比文件是否一样实时查看日志：tail -f /var/log/messages（-f 实时  -n 行数）du可以查看文件及文件夹的大小。  // du -h file_path查看磁盘占用：df -hmv file1 file2：移动文件，若file2不存在则为改名字查看进程：ps -ef | prep name解包：tar xvf FileName.tar　　unzip filename.zip打包：tar cvf FileName.tar DirNamecp -r dir1 dir2远程传输      上传$scp -r local_folder remote_username@remote_ip:remote_folder    下载$scp remote_username@remote_ip:remote_folder local_foldercurl:用来请求web服务器，== postman。    get：参数加url后面.    POST：--data &quot;data&quot;,-X 动作，默认get,    -d POST自动带上Content-Type : application/x-www-form-urlencoded </code></pre><h2 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h2><pre><code>chmod 755 file拥有者-属组用户-其他用户x-可执行r-可读w-可写rwx = 111 = 7rw- = 110 = 6r-x = 101 = 5r-- = 100 = 4-wx = 011 = 3-w- = 010 = 2--x = 001 = 1--- = 000 = 0ll 关于第一位最高位的解释：    d代表的是目录(directroy)    -代表的是文件(regular file)    s代表的是套字文件(socket)    p代表的管道文件(pipe)或命名管道文件(named pipe)    l代表的是符号链接文件(symbolic link)    b代表的是该文件是面向块的设备文件(block-oriented device file)    c代表的是该文件是面向字符的设备文件(charcter-oriented device file)</code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><pre><code>make PREFIX=/home/lyy/lyy/redis install  指定路径安装Linux 查看环境变量 echo $PATH     临时设置：export env=xxx    永久设置：# vi /etc/profile             export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</code></pre><h2 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h2><pre><code>/bin： bin是Binary的缩写, 这个目录存放着最经常使用的命令。/boot：这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。/dev ：dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。/opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。/root：该目录为系统管理员，也称作超级权限者的用户主目录。/tmp：这个目录是用来存放一些临时文件的。/usr： 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。/etc：这个目录用来存放所有的系统管理所需要的配置文件和子目录。/home：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。/lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。/media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。/mnt：让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。/usr/bin：系统用户使用的应用程序。/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。/var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</code></pre><h2 id="文件颜色"><a href="#文件颜色" class="headerlink" title="文件颜色"></a>文件颜色</h2><pre><code>白色：表示普通文件浅蓝色：表示链接文件； 灰色：表示其他文件； 绿色：表示可执行文件； 红色：表示压缩文件； 蓝色：表示目录； 红色闪烁：表示链接的文件有问题了； 黄色：表示设备文件，包括block,char,fifo。 </code></pre><h2 id="实现ssh免密登录"><a href="#实现ssh免密登录" class="headerlink" title="实现ssh免密登录"></a>实现ssh免密登录</h2><pre><code>1、生成自己的公钥：$ ssh-keygen (一路回车)2、将公钥放到 对方.ssh/authorized_keys 下，没有则创建文件夹3、chmod 700 ~/.ssh   chmod 600 ~/.ssh/authorized_keys4、重启  // ubuntu系统：service ssh restart  // debian系统：/etc/init.d/ssh restart可能出错：    目录权限问题：Linux家目录设为700，.ssh为700，authorized_keys为600 即可解决</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git  工作常用命令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用命令</title>
    <link href="http://yoursite.com/2019/10/22/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/10/22/MySQL常用命令/</id>
    <published>2019-10-22T09:25:25.000Z</published>
    <updated>2019-10-30T01:55:06.532Z</updated>
    
    <content type="html"><![CDATA[<p>工作中常用的 MySQL 命令</p><a id="more"></a><h3 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h3><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><pre><code>登录：mysql -h -uroot -pshow databases;  use youke;  show tables;  desc 表名;  exit;</code></pre><h5 id="针对表"><a href="#针对表" class="headerlink" title="针对表"></a>针对表</h5><p>创建表 node这个数据库里面创建一个user表</p><pre><code>创建：CREATE TABLE `node`.`nodeuser`(    `id` INT(11) NOT NULL AUTO_INCREMENT,  # id字段 int(11)数据类型，最大的值为11位 id自动增长    `username` varchar(64) NOT NULL,    `pass` varchar(64) NOT NULL,    PRIMARY KEY(`id`)  # 重要 主键)ENGINE = InnoDB CHARSET = utf8;增加字段：ALTER TABLE account ADD status int(11) NOT NULL DEFAULT 0;删除字段：ALTER TABLE &lt;表名&gt; DROP &lt;字段名称&gt;修改表名称：ALTER TABLE &lt;表名&gt; RENAME &lt;新表名&gt;</code></pre><h5 id="针对数据"><a href="#针对数据" class="headerlink" title="针对数据"></a>针对数据</h5><pre><code>INSERT INTO &#39;user&#39; (`id`, &#39;username&#39;, &#39;pass&#39;) values (1, &#39;goudan&#39;, &#39;123&#39;);  # 增 固定代码 哪个表DELETE FROM user where id = 0  # 删 删article表的数据 因为id是唯一的update `xxx` set `username`=`1234` where `id`=6666;  # 改SELECT *FORM `shuoshuo` WHERE `id`=?  # 查查询：    过滤：加distinct，如select distinct roomid from audio_pos;    区间查找：between and，如：select * from audio_pos where id between 2600 and 2650;</code></pre><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><pre><code>$ ./mysqldump -uyouke_write -p -h 10.66.92.228 -d youke &gt; /home/lyy/db.sql  # 导出表结构导入表结构，进入数据库，进入某一库，执行 source xxx.sql查看索引：show index from tblname; 等同于show keys from tblname;select version();  查看MySQL版本show create table audio_pos;查看创建table的SQL</code></pre><h5 id="常用操作总结"><a href="#常用操作总结" class="headerlink" title="常用操作总结"></a>常用操作总结</h5><ul><li>让别人访问自己的MySQL<pre><code>登录MySQL：mysql -u root -pvmwaremysql&gt;use mysql;mysql&gt;update user set host = &#39;%&#39; where user = &#39;root&#39;;mysql&gt;select host, user from user;重启MySQL服务：Windows可从服务重启</code></pre></li></ul><h5 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h5><pre><code>MySQL字段类型：-2 147 483 648 ～ 2 147 483 647， INT UNSIGNED的范围类型就是0 ～ 4 294 967 295。insert on duplicate key update 比 replace快，原因是索引方面1. 如果Key是空的, 那么该列值的可以重复, 表示该列没有索引, 或者是一个非唯一的复合索引的非前导列2. 如果Key是PRI,  那么该列是主键的组成部分3. 如果Key是UNI,  那么该列是一个唯一值索引的第一列(前导列),并别不能含有空值(NULL)4. 如果Key是MUL,  那么该列的值可以重复, 该列是一个非唯一索引的前导列(第一列)或者是一个唯一性索引的组成部分但是可以含有空值NULL如果对于一个列的定义，同时满足上述4种情况的多种，比如一个列既是PRI,又是UNI那么&quot;desc 表名&quot;的时候，显示的Key值按照优先级来显示 PRI-&gt;UNI-&gt;MUL那么此时，显示PRI</code></pre><h3 id="重点链接"><a href="#重点链接" class="headerlink" title="重点链接"></a>重点链接</h3><p><a href="https://static001.geekbang.org/resource/image/0d/d9/0d2070e8f84c4801adbfa03bda1f98d9.png" target="_blank" rel="noopener">MySQL总览图</a><br><a href="https://blog.csdn.net/qq_41307443/article/details/79839558" target="_blank" rel="noopener">MySQL Windows安装</a><br><a href="https://www.cnblogs.com/RayWang/p/9347874.html" target="_blank" rel="noopener">MySQL安装问题</a><br><a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">MySQL explain详解</a><br><a href="https://cyc2018.github.io/CS-Notes/#/notes/MySQL" target="_blank" rel="noopener">MySQL相关知识</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中常用的 MySQL 命令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>pm2工作使用</title>
    <link href="http://yoursite.com/2019/10/22/pm2%E5%B7%A5%E4%BD%9C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/22/pm2工作使用/</id>
    <published>2019-10-22T09:25:25.000Z</published>
    <updated>2019-10-24T02:56:21.494Z</updated>
    
    <content type="html"><![CDATA[<p>pm2 基本知识及常用命令</p><a id="more"></a><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><pre><code>配置文件里的设置项，跟命令行参数基本是一一对应的。可以选择yaml或者json文件，就看个人洗好了。json格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如--env）PM2配置文件夹结构    一旦PM2启动，自动创建这些文件夹：$HOME/.pm2 将包含所有与PM2相关的文件$HOME/.pm2/logs 将包含所有应用程序日志  // out标准输出  error 错误输出$HOME/.pm2/pids 将包含所有应用程序pid$HOME/.pm2/pm2.log PM2日志  // pm2自身日志，如谁用了那个命令$HOME/.pm2/pm2.pid PM2 pid$HOME/.pm2/rpc.sock 远程命令的套接字文件$HOME/.pm2/pub.sock 用于可发布事件的套接字文件$HOME/.pm2/conf.js PM2配置</code></pre><h5 id="启动文件"><a href="#启动文件" class="headerlink" title="启动文件"></a>启动文件</h5><pre><code>配置pm2启动文件  生成示例生态系统.json文件，其中列出了进程和部署环境$ pm2 ecosystem；这将生成一个示例ecosystem.config.js根据需要再次编辑文件{  &quot;apps&quot;: [  // json结构，apps是一个数组，每一个数组成员就是对应一个pm2中运行的应用    {      &quot;name&quot;: &quot;mywork&quot;,  // 应用程序名称      &quot;cwd&quot;: &quot;/srv/node-app/current&quot;,  // 应用程序所在的目录      &quot;script&quot;: &quot;bin/www&quot;,  // 应用程序的脚本路径      &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm Z&quot;,        &quot;error_file&quot;: &quot;/var/log/node-app/node-app.stderr.log&quot;,  // 错误日志      &quot;out_file&quot;: &quot;log/node-app.stdout.log&quot;,  //  自定义应用程序日志文件      &quot;pid_file&quot;: &quot;pids/node-geo-api.pid&quot;,  // 自定义应用程序的pid文件      &quot;instances&quot;: 6,      &quot;min_uptime&quot;: &quot;200s&quot;,  // 最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量      &quot;max_restarts&quot;: 10,    // 设置应用程序异常退出重启的次数，默认15次（从0开始计数）      &quot;max_memory_restart&quot;: &quot;1M&quot;,  // 服务内存超过1M，会自动重启      &quot;cron_restart&quot;: &quot;1 0 * * *&quot;,  // 定时启动，解决重启能解决的问题      &quot;watch&quot;: false,  // 监听重启，启用情况下，文件夹或子文件夹下变化应用自动重启；      &quot;merge_logs&quot;: true,      &quot;exec_interpreter&quot;: &quot;node&quot;,      &quot;exec_mode&quot;: &quot;fork&quot;,  // 应用启动模式，支持fork和cluster模式；      &quot;autorestart&quot;: false,  // 默认为true, 发生异常的情况下自动重启；      &quot;vizion&quot;: false    }  ]}</code></pre><h3 id="工作常用命令"><a href="#工作常用命令" class="headerlink" title="工作常用命令"></a>工作常用命令</h3><pre><code>启动项目：pm2 start ecosystem.config.js--env development实时日志打印：pm2 logs youke查看项目状态：pm2 show youke停止项目：pm2 stop youke</code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><pre><code>重启：pm2 restart ecosystem.config.jspm2 reload；与restart杀死并重新启动进程的相对，reload实现了0秒的停机时间重载。pm2 [list|ls|l|status]查看启动程序的详细信息：pm2 describe idpm2 monit：可以得到进程(以及集群)的CPU的使用率和内存占用(ctrl +c 退出)启动项目：pm2 start ecosystem.config.js --watch--watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。-i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。--ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。        比如--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;-n --name：应用的名称。查看应用信息的时候可以用到。-o --output &lt;path&gt;：标准输出日志文件的路径。-e --error &lt;path&gt;：错误输出日志文件的路径。</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://wohugb.gitbooks.io/pm2/content/bu_shu.html" target="_blank" rel="noopener">pm2教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pm2 基本知识及常用命令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="pm2" scheme="http://yoursite.com/tags/pm2/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>多媒体&amp;FFmpeg命令</title>
    <link href="http://yoursite.com/2019/10/22/%E5%A4%9A%E5%AA%92%E4%BD%93&amp;FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/10/22/多媒体&amp;FFmpeg常用命令/</id>
    <published>2019-10-22T09:25:25.000Z</published>
    <updated>2019-10-30T03:09:11.588Z</updated>
    
    <content type="html"><![CDATA[<p>多媒体基本概念及 FFmpeg 常用命令介绍</p><a id="more"></a><h3 id="多媒体基本概念"><a href="#多媒体基本概念" class="headerlink" title="多媒体基本概念"></a>多媒体基本概念</h3><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><pre><code>容器(Container)——容器就是一种文件格式，比如flv，mkv等。包含下面5种流以及文件头信息。流(Stream)——是一种视频数据信息的传输方式，5种流：音频，视频，字幕，附件，数据。帧(Frame)——帧代表一幅静止的图像，分为I帧，P帧，B帧。编解码器(Codec)——是对视频进行压缩或者解压缩，CODEC =COde （编码） +DECode（解码）复用/解复用(mux/demux)——把不同的流按照某种容器的规则放入容器，这种行为叫做复用（mux）把不同的流从某种容器中解析出来，这种行为叫做解复用(demux)采样率：录音设备在一秒钟内对声音信号的采样次数，采样频率越高声音的还原就越真实越自然。采样频率一般共分为22.05KHz、44.1KHz、48KHz三个等级。8KHz - 电话所用采样率, 对于人的说话已经足够，22.05KHz只能达到FM广播的声音品质，44.1KHz则是理论上的CD音质界限，48KHz则更加精确一些。采样位数：记录每次采样值数值大小的位数。采样位数通常有8bits或16bits两种，采样位数越大，所能记录声音的变化度就越细腻，相应的数据量就越大。声道数：声道数是指支持能不同发声的音响的个数，它是衡量音响设备的重要指标之一。单声道的声道数为1个声道；双声道的声道数为2个声道；立体声道的声道数默认为2个声道；立体声道（4声道）的声道数为4个声道。码率：码率 = 采样率 * 采样位数 * 声道数如果是CD音质，采样率44.1KHz，采样位数16bit，立体声(双声道)，码率 = 44.1 * 16 * 2 = 1411.2Kbps = 176.4KBps，那么录制一分钟的音乐，大概10.34MB。音频帧：音频数据是流式的，本身没有明确的一帧帧的概念，在实际的应用中，为了音频算法处理/传输的方便，一般约定俗成取2.5ms~60ms为单位的数据量为一帧音频。这个时间被称之为“采样时间”，其长度没有特别的标准，它是根据编解码器和具体应用的需求来决定的。编码：通过一定协议或规则把一段声音或图像转化成计算机数字文件的过程。音频编码：将音频采样数据（PCM等）压缩成为音频码流，从而降低音频的数据量。常见的音频编码方案有AAC、MP3、WMA。 AAC原始码流（又称为“裸流”）是由一个一个的ADTS frame组成的。解码：编码的逆过程，把编码过的媒体文件重新转化成声音或图像。</code></pre><h5 id="视频基本概念"><a href="#视频基本概念" class="headerlink" title="视频基本概念"></a>视频基本概念</h5><pre><code>视频：静止的画面叫图像（picture）。连续的图像变化每秒超过24帧（frame）画面以上时，根椐视觉暂留原理，人眼无法辨别每幅单独的静态画面，看上去是平滑连续的视觉效果。这样的连续画面叫视频。当连续图像变化每秒低于24帧画面时，人眼有不连续的感觉叫动画（cartoon）。帧率：帧/秒（frames per second）的缩写，也称为帧速率，测量用于保存、显示动态视频的信息数量。每一帧都是静止的图象，快速连续地显示帧便形成了运动的假象。每秒钟帧数 （fps） 愈多，所显示的动作就会愈流畅，可理解为秒钟时间里刷新的图片的帧数，也可以理解为图形处理器每秒钟能够刷新几次，也就是指每秒钟能够播放（或者录制）多少格画面。分辨率：一个表示平面图像精细程度的概念，通常它是以横向和纵向点的数量来衡量的，表示成水平点数垂直点数的形式，在计算机显示领域我们也表示成“每英寸像素”（ppi）。在一个固定的平面内，分辨率越高，意味着可使用的点数越多，图像越细致。</code></pre><h5 id="M3U8-amp-HLS"><a href="#M3U8-amp-HLS" class="headerlink" title="M3U8 &amp; HLS"></a>M3U8 &amp; HLS</h5><pre><code>M3U8是一种常见的流媒体格式，主要以文件列表的形式存在，既支持直播又支持点播HLS（全称：Http Live Streaming）是由Apple公司定义的用于实时流传输的协议，HLS基于HTTP协议实现，传输内容包括两部分：        一是M3U8描述文件：是指UTF-8编码格式的M3U文件。M3U文件是记录了一个索引纯文本文件，打开它时播放软件并不是播放它，而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。        二是TS(Transport Stream)媒体文件：为什么要用 TS 而不是 MP4？这是因为两个 TS 片段可以无缝拼接，播放器能连续播放，而 MP4 文件由于编码方式的原因，两段 MP4 不能无缝拼接，连续播放会产生破音和画面间断</code></pre><h5 id="MP3-amp-AAC-区别"><a href="#MP3-amp-AAC-区别" class="headerlink" title="MP3 &amp; AAC 区别"></a>MP3 &amp; AAC 区别</h5><pre><code>MP3和AAC都是音频格式，后者是前者的进化版MP3：MP3是一种数字音乐格式，可以将CD轨道减小到其正常大小的十分之一左右，而不会明显降低质量。，MP3高频数据丢失严重AAC：AAC与MP3相似。它实质上可以切出或压缩人耳无法拾取的信息，从而使数字文件更小，更易于管理，因此下载速度更快。AAC的大小约为MP3的一半，但质量更高。压缩程度更高,提升压缩率，支持多声道，更高的解析度，提升的解码效率。相比MP3音质和占有空间更小ADTS全称是(Audio Data Transport Stream)，是AAC的一种十分常见的传输格式。</code></pre><h5 id="常见音频格式"><a href="#常见音频格式" class="headerlink" title="常见音频格式"></a>常见音频格式</h5><pre><code>有损格式主要有MP3, WMA, OGG, MP3pro, AAC, VQF, ASF等。无损：WAV</code></pre><h3 id="FFmpeg-常用命令"><a href="#FFmpeg-常用命令" class="headerlink" title="FFmpeg 常用命令"></a>FFmpeg 常用命令</h3><pre><code>-y 覆盖输出文件，若存在不提示覆盖。-f 输出hls格式。hls协议流媒体网络传输协议：hls_list_size 3:HLS播放的列表，FFmpeg默认5。-hls_time 1:设置M3U8列表中切片的duration,每一片TS文件时长1秒左右。-hls_wrap 10:表示为最大的TS循环数，10个，每10个一个循环-ar freq 设置音频采样率 -ac channels 设置通道 缺省为与输入相同 -acodec 使用pcm_s16le编码</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多媒体基本概念及 FFmpeg 常用命令介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="多媒体" scheme="http://yoursite.com/categories/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
    
      <category term="多媒体" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
      <category term="FFmpeg" scheme="http://yoursite.com/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>工具&amp;网站推荐</title>
    <link href="http://yoursite.com/2019/10/22/%E5%B7%A5%E5%85%B7&amp;%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2019/10/22/工具&amp;网站推荐/</id>
    <published>2019-10-22T08:07:25.000Z</published>
    <updated>2019-10-24T07:50:59.731Z</updated>
    
    <content type="html"><![CDATA[<p>工作常用软件推荐</p><a id="more"></a><h3 id="工作常用软件"><a href="#工作常用软件" class="headerlink" title="工作常用软件"></a>工作常用软件</h3><p>思维导图 MindMaster<br>截图工具 Snipaste<br>服务器之间文件传输用 sftp,filezilla<br>连接服务器用 cmder, MobaXterm_Personal，putty</p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p><a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">字体图标库</a><br><a href="https://blog.csdn.net/weixin_40845165/article/details/84076958" target="_blank" rel="noopener">Navicat 破解版</a><br><a href="https://www.staticgen.com/" target="_blank" rel="noopener">静态网页技术栈</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作常用软件推荐&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>hexo&amp;markdown常用命令</title>
    <link href="http://yoursite.com/2019/10/21/hexo&amp;markdown%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/10/21/hexo&amp;markdown常用命令/</id>
    <published>2019-10-21T13:20:05.000Z</published>
    <updated>2019-10-24T02:58:40.023Z</updated>
    
    <content type="html"><![CDATA[<p>hexo &amp; markdown 常用命令</p><a id="more"></a><h2 id="hexo常用命令笔记"><a href="#hexo常用命令笔记" class="headerlink" title="hexo常用命令笔记"></a>hexo常用命令笔记</h2><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><pre><code>hexo n  # 写文章hexo clean  # 清除缓存 网页正常情况下可以忽略此条命令hexo g  # 生成hexo d  # 部署 # 可与hexo g 合并为 hexo d -g</code></pre><h5 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h5><pre><code>npm install hexo -g # 安装  npm update hexo -g # 升级  hexo init # 初始化</code></pre><h5 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h5><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;  # 新建文章hexo p == hexo publishhexo g == hexo generate # 生成hexo s == hexo server  # 启动服务预览hexo d == hexo deploy  # 部署</code></pre><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s  # 静态模式hexo server -p 5000  # 更改端口hexo server -i 192.168.1.1  # 自定义 IPhexo clean  # 清除缓存 网页正常情况下可以忽略此条命令hexo g  # 生成静态网页hexo d  # 开始部署</code></pre><h2 id="markdown-基础语法"><a href="#markdown-基础语法" class="headerlink" title="markdown 基础语法"></a>markdown 基础语法</h2><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><h5 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h5><ul><li>加粗： 要加粗的文字左右分别用两个*号包起来</li><li>斜体： 要倾斜的文字左右分别用一个*号包起来</li><li>斜体加粗：  要倾斜和加粗的文字左右分别用三个*号包起来</li><li>删除线：  要加删除线的文字左右分别用两个~~号包起来</li></ul><p><strong>效果：</strong><br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><p><strong>效果：</strong></p><blockquote><p>这是引用的内容</p></blockquote><h5 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h5><p>三个或者三个以上的 - 或者 * 都可以。<br><strong>效果：</strong></p><hr><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><blockquote><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a> u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p></blockquote><p><strong>效果：</strong><br><img src="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="blockchain" title="区块链"></p><h5 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h5><blockquote><p>语法：<a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加</p></blockquote><p><strong>效果：</strong><br><a href="luoyangyang.pub">洋洋的博客</a></p><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>语法：</p><ul><li>无序列表：</li></ul><p>用 - + * 任何一种都可以<br>注意：- + * 跟内容之间都要有一个空格<br><strong>效果：</strong></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>有序列表：</li></ul><p>用数字加点</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li>列表嵌套</li></ul><p>上一级和下一级之间敲三个空格即可</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>单行代码：代码之间分别用一个反引号包起来<br>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo &amp;amp; markdown 常用命令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>git工作常用命令</title>
    <link href="http://yoursite.com/2019/10/21/git%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"/>
    <id>http://yoursite.com/2019/10/21/git工作常用/</id>
    <published>2019-10-21T13:20:05.000Z</published>
    <updated>2019-10-30T02:57:51.090Z</updated>
    
    <content type="html"><![CDATA[<p>git  工作常用命令</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1哈希值，作为指纹字符串。<br>该字串由 40个十六进制字符（0-9及 a-f）组成，看起来就像是：24b9da6552252987aa493b52f8696cd6d3b00373<br>Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</p><p>Git 管理项目时，文件流转的三个工作区域： </p><ul><li>Git 的工作目录</li><li>暂存区域</li><li>以及本地仓库</li></ul><p>基本的 Git 工作流程如下：</p><ol><li>在工作目录中修改某些文件。 </li><li>对修改后的文件进行快照，然后保存到暂存区域。 </li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ol><h3 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h3><p>分为俩种情况：</p><ol><li>在工作目录中初始化新仓库<pre><code>$git init  # 初始化;产生一个 .git 文件$git remote add origin git地址  # 添加远程仓库;origin-远程仓库名字可自定义</code></pre></li><li>从现有仓库克隆<pre><code>$ git clone git://github.com/schacon/grit.git  # 在当前目录下创建一个名为“grit”的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。</code></pre></li></ol><p><strong>后面的命令一定要进入项目目录，即包含 .git 的目录</strong></p><pre><code>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;  # 合并至当前本地分支，则  :和  :后可以省略$ git push origin dev_lyy(本地):dev_lyy(远程)  # 推送至远程分支，没有则新建远程分支</code></pre><h3 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h3><pre><code>$ git branch --set-upstream-to=origin/test test  与远程分支建立连接$ git branch：不加参数 列出本地    -r                      # 列出远程分支    -a                      # all    -name                   # 新建分支    -track                  # 本地/远程（创建分支并且关联远程）    -v                      # verbose详细信息    -d/-D name              # 删除指定分支    -m old_name new_name    # 修改分支名$ git push origin --delete branch_name # 删除远程分支$ git checkout -b branch_name [branch/commit] # 创建并切换分支</code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><pre><code>$ git remote add name git_address   # 关联远程库$ git stash # 储藏当前工作，接着到另一分支处理问题$ git stash list # 查看储藏栈$ git stash pop # 提取最新工作并从栈删除$ git cherry-pick # 可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，                                    并作为一个新的提交引入到你当前分支上。$ git diff 具体修改了那些地方 git diff &lt;local branch&gt; &lt;remote&gt;/&lt;remote branch&gt;对比远程分支$ git remote：管理主机名    不带参数 -列出所有远程主机    -v 参看远程主机的网址    -show &lt;主机名&gt;查看详细信息忽略文件：创建一个名为 .gitignore的文件，列出要忽略的文件模式。如：*.a       #忽略所有 .a 结尾的文件    !lib.a    #但 lib.a 除外</code></pre><h3 id="常见误操作处理方法"><a href="#常见误操作处理方法" class="headerlink" title="常见误操作处理方法"></a>常见误操作处理方法</h3><pre><code>撤销 add：git reset HEAD合并 commit：    1. 追加至上一个 commit ：git commit --amend；commit 的时间是不会变的；可加上--no-edit    2. 合并多个：git rebase -i commit(-i 后参数可写commitHSAH值即你想合并至哪一个commit        或者-i HEAD~n(HEAD将它看做 你的上一次提交 的别名)HEAD~1 上个版本 HEAD~n 上n个版本)        - 紧接着进入vim界面：pick为保留，s或者squash为删除commit        - 又另一个vim界面：commit msg 保留自己需要的或者修改，用#删除别的commit msg如何重置某个文件到未修改的状态？  # git checkout -- &lt;filepath&gt;如何重置所有文件到未修改的状态？  # git reset --hard如何重置到某个 commit？          # git reset &lt;commit SHA&gt;git reset用于撤销未被提交到remote的改动，即撤销local的修改。除了移动当前分支的HEAD，还可以更改workspace和index：git reset --soft HEAD^上一个commit，想撤回俩个用HEAD~2：    --soft：修改HEAD，不修改index和workspace。    --mixed：修改HEAD和index，不修改workspace。默认行为。    --hard：修改HEAD、index、workspace。把index和workspace的修改全部撤销。</code></pre><h3 id="常见错误处理方法"><a href="#常见错误处理方法" class="headerlink" title="常见错误处理方法"></a>常见错误处理方法</h3><ul><li>git pull or push报错：fatal: refusing to merge unrelated histories （拒绝合并不相关的历史）</li></ul><p><code>则在pull命令后紧接着使用--allow-unrelated-history选项来解决问题（该选项可以合并两个独立启动仓库的历史）。</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git  工作常用命令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/17/hello-world/"/>
    <id>http://yoursite.com/2019/10/17/hello-world/</id>
    <published>2019-10-17T12:23:25.000Z</published>
    <updated>2019-10-22T08:04:07.383Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="helllo" scheme="http://yoursite.com/tags/helllo/"/>
    
      <category term="world" scheme="http://yoursite.com/tags/world/"/>
    
  </entry>
  
  <entry>
    <title>记录如何使用hexo搭建博客</title>
    <link href="http://yoursite.com/2019/10/17/%E8%AE%B0%E5%BD%95%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/10/17/记录如何使用hexo搭建博客/</id>
    <published>2019-10-17T12:23:25.000Z</published>
    <updated>2019-10-24T02:56:56.418Z</updated>
    
    <content type="html"><![CDATA[<p>hexo + GitHub pages 搭建博客流程</p><a id="more"></a><h3 id="一、hexo-amp-node-安装"><a href="#一、hexo-amp-node-安装" class="headerlink" title="一、hexo &amp; node 安装"></a>一、hexo &amp; node 安装</h3><p>npm install hexo-cli -g<br>npm install hexo-deployer-git –save<br>or 使用yarn</p><h3 id="二、-Hexo初始化配置"><a href="#二、-Hexo初始化配置" class="headerlink" title="二、 Hexo初始化配置"></a>二、 Hexo初始化配置</h3><h5 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h5><p>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><blockquote><p>$ hexo init</p></blockquote><h5 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h5><p><img src="https://www.cnblogs.com/images/cnblogs_com/luoyangyang/1573981/t_hexo_mulu.png" alt="hexo目录"></p><ul><li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><li>public：执行hexo generate命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 <ul><li>drafts：草稿文章</li><li>posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li></ul><h5 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h5><p>执行下面语句，执行完即可登录localhost:4000查看效果</p><blockquote><p>hexo generate<br>hexo server</p></blockquote><h3 id="三、-将博客部署到Github-Pages上"><a href="#三、-将博客部署到Github-Pages上" class="headerlink" title="三、 将博客部署到Github Pages上"></a>三、 将博客部署到Github Pages上</h3><h5 id="创建项目代码库"><a href="#创建项目代码库" class="headerlink" title="创建项目代码库"></a>创建项目代码库</h5><ol><li>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。</li><li>创建要点如下：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7492a1849?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="如图"></li></ol><h5 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h5><ol><li>创建一对新的SSH密钥(keys)</li></ol><blockquote><p>$ssh-keygen -t rsa -C “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“<br>#这将按照你提供的邮箱地址，创建一对密钥<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</p></blockquote><p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p><ol start="2"><li>在GitHub账户中添加你的公钥</li><li>测试</li></ol><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>的部分不要修改：</p><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>出现 yes/no ？ 输入yes</p><ol start="4"><li>设置用户信息</li></ol><blockquote><p>$ git config –global user.name “username” //用户名</p></blockquote><blockquote><p>$ git config –global user.email  “<a href="mailto:liji.anchang@163.com" target="_blank" rel="noopener">liji.anchang@163.com</a>“ //填写自己的邮箱</p></blockquote><h3 id="四、-将本地的Hexo文件更新到Github的库中"><a href="#四、-将本地的Hexo文件更新到Github的库中" class="headerlink" title="四、 将本地的Hexo文件更新到Github的库中"></a>四、 将本地的Hexo文件更新到Github的库中</h3><ol><li>复制项目 GitHub 地址</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c77a882a00?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="如图"></p><ol start="2"><li><p>打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件</p></li><li><p>在配置文件里作如下修改，保存</p></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c78dc8dca4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="如图"></p><ol start="4"><li>在Hexo文件夹下执行<blockquote><p>hexo g<br>hexo d</p></blockquote></li></ol><p>或者</p><blockquote><p>hexo g -d</p></blockquote><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：luoyangyang369.github.io)。</p><p>假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>这样，你再执行hexo g -d，你的博客就部署到Github上了。</p><ol start="5"><li>在浏览器上输入自己的主页地址即可访问</li></ol><h3 id="五、美化自己博客"><a href="#五、美化自己博客" class="headerlink" title="五、美化自己博客"></a>五、美化自己博客</h3><ol><li>进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo的官网主题专栏</a></li><li>克隆主题<br>再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入:<blockquote><p>git clone <a href="https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)</a> </p></blockquote></li><li>修改Hexo配置文件</li></ol><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml<br>修改参数为：theme: hexo-theme-next</p><ol start="4"><li><p>部署主题，本地查看效果</p><blockquote><p>hexo -g =&gt; hexo -s<br>简写：hexo server -g</p></blockquote></li><li><p>如果效果满意，将它部署到Github上</p></li></ol><blockquote><p>hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)<br>hexo g -d</p></blockquote><h3 id="六、-在博客写文章"><a href="#六、-在博客写文章" class="headerlink" title="六、 在博客写文章"></a>六、 在博客写文章</h3><ol><li>用hexo发表新文章<blockquote><p>$ hexo n “文章标题”</p></blockquote></li></ol><p>其中 我的家 为文章标题，执行命令 hexo n “我的家” 后，会在项目 \Hexo\source_posts 中生成 我的家.md文件，用编辑器打开编写即可。</p><p>当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。<br>写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p><blockquote><p>$ hexo g #生成</p></blockquote><blockquote><p>$ hexo d #部署 # 可与hexo g合并为 hexo d -g</p></blockquote><ol start="2"><li>用 <a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown</a> 写文章</li></ol><p>我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。</p><p>找一篇自己写过的 markdown 文章复制进去之后，只要执行</p><blockquote><p>$ hexo d -g</p></blockquote><p>推送至我们的Github仓库即可。</p><h3 id="七、-将自己的域名关联到Github-Pages上"><a href="#七、-将自己的域名关联到Github-Pages上" class="headerlink" title="七、 将自己的域名关联到Github Pages上"></a>七、 将自己的域名关联到Github Pages上</h3><p>#TODO</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://juejin.im/entry/5a574864f265da3e3c6c1217" target="_blank" rel="noopener">2018，你该搭建自己的博客了！</a><br><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/" target="_blank" rel="noopener">使用指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo + GitHub pages 搭建博客流程&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
