<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>工具&amp;网站推荐</title>
    <link href="undefined2019/10/22/%E5%B7%A5%E5%85%B7&amp;%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <url>2019/10/22/%E5%B7%A5%E5%85%B7&amp;%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>工作常用软件推荐</p><a id="more"></a><h3 id="工作常用软件"><a href="#工作常用软件" class="headerlink" title="工作常用软件"></a>工作常用软件</h3><p>思维导图 MindMaster<br>截图工具 Snipaste<br>服务器之间文件传输用 sftp,filezilla<br>连接服务器用 MobaXterm_Personal，putty</p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p><img src="https://fontawesome.com/icons?d=gallery" srcset="/img/loading.gif" alt="字体图标库"><br><img src="https://blog.csdn.net/weixin_40845165/article/details/84076958" srcset="/img/loading.gif" alt="Navicat 破解版"><br>" srcset="/img/loading.gif<img src="" alt=""><br>" srcset="/img/loading.gif<img src="" alt=""><br>" srcset="/img/loading.gif<img src="" alt=""><br>" srcset="/img/loading.gif<img src="" alt=""><br>" srcset="/img/loading.gif<img src="" alt=""><br>" srcset="/img/loading.gif<img src="" alt=""><br>" srcset="/img/loading.gif<img src="" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo&amp;markdown常用命令</title>
    <link href="undefined2019/10/21/hexo&amp;markdown%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>2019/10/21/hexo&amp;markdown%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>hexo &amp; markdown 常用命令</p><a id="more"></a><h2 id="hexo常用命令笔记"><a href="#hexo常用命令笔记" class="headerlink" title="hexo常用命令笔记"></a>hexo常用命令笔记</h2><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><pre><code>hexo n  # 写文章hexo clean  # 清除缓存 网页正常情况下可以忽略此条命令hexo g  # 生成hexo d  # 部署 # 可与hexo g 合并为 hexo d -g</code></pre><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><pre><code>npm install hexo -g # 安装  npm update hexo -g # 升级  hexo init # 初始化</code></pre><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot;  # 新建文章hexo p == hexo publishhexo g == hexo generate # 生成hexo s == hexo server  # 启动服务预览hexo d == hexo deploy  # 部署</code></pre><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><pre><code>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s  # 静态模式hexo server -p 5000  # 更改端口hexo server -i 192.168.1.1  # 自定义 IPhexo clean  # 清除缓存 网页正常情况下可以忽略此条命令hexo g  # 生成静态网页hexo d  # 开始部署</code></pre><h2 id="markdown-基础语法"><a href="#markdown-基础语法" class="headerlink" title="markdown 基础语法"></a>markdown 基础语法</h2><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li>加粗： 要加粗的文字左右分别用两个*号包起来</li><li>斜体： 要倾斜的文字左右分别用一个*号包起来</li><li>斜体加粗：  要倾斜和加粗的文字左右分别用三个*号包起来</li><li>删除线：  要加删除线的文字左右分别用两个~~号包起来</li></ul><p><strong>效果：</strong><br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><p><strong>效果：</strong></p><blockquote><p>这是引用的内容</p></blockquote><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>三个或者三个以上的 - 或者 * 都可以。<br><strong>效果：</strong></p><hr><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><blockquote><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a> u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p></blockquote><p><strong>效果：</strong><br><img src="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" srcset="/img/loading.gif" alt="blockchain" title="区块链"></p><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><blockquote><p>语法：<a href="超链接地址" title="超链接title">超链接名</a><br>title可加可不加</p></blockquote><p><strong>效果：</strong><br><a href="luoyangyang.pub">洋洋的博客</a></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>语法：</p><ul><li>无序列表：</li></ul><p>用 - + * 任何一种都可以<br>注意：- + * 跟内容之间都要有一个空格<br><strong>效果：</strong></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>有序列表：</li></ul><p>用数字加点</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li>列表嵌套</li></ul><p>上一级和下一级之间敲三个空格即可</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>单行代码：代码之间分别用一个反引号包起来<br>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>markdown</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git工作常用命令</title>
    <link href="undefined2019/10/21/git%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/"/>
    <url>2019/10/21/git%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>git  工作常用命令</p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Git 使用 SHA-1 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1哈希值，作为指纹字符串。<br>该字串由 40个十六进制字符（0-9及 a-f）组成，看起来就像是：24b9da6552252987aa493b52f8696cd6d3b00373<br>Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。</p><p>Git 管理项目时，文件流转的三个工作区域： </p><ul><li>Git 的工作目录</li><li>暂存区域</li><li>以及本地仓库</li></ul><p>基本的 Git 工作流程如下：</p><ol><li>在工作目录中修改某些文件。 </li><li>对修改后的文件进行快照，然后保存到暂存区域。 </li><li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</li></ol><h3 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h3><p>分为俩种情况：</p><ol><li>在工作目录中初始化新仓库<pre><code>$git init  # 初始化;产生一个 .git 文件$git remote add origin git地址  # 添加远程仓库;origin-远程仓库名字可自定义</code></pre></li><li>从现有仓库克隆<pre><code>$ git clone git://github.com/schacon/grit.git  # 在当前目录下创建一个名为“grit”的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。</code></pre></li></ol><p><strong>后面的命令一定要进入项目目录，即包含 .git 的目录</strong></p><pre><code>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;  # 合并至当前本地分支，则  :和  :后可以省略$ git push origin dev_lyy(本地):dev_lyy(远程)  # 推送至远程分支，没有则新建远程分支</code></pre><h3 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h3><pre><code>$ git branch --set-upstream-to=origin/test test  与远程分支建立连接$ git branch：不加参数 列出本地    -r                      # 列出远程分支    -a                      # all    -name                   # 新建分支    -track                  # 本地/远程（创建分支并且关联远程）    -v                      # verbose详细信息    -d/-D name              # 删除指定分支    -m old_name new_name    # 修改分支名$ git push origin --delete branch_name # 删除远程分支$ git checkout -b branch_name [branch/commit] # 创建并切换分支</code></pre><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><pre><code>$ git remote add name git_address   # 关联远程库$ git stash # 储藏当前工作，接着到另一分支处理问题$ git stash list # 查看储藏栈$ git stash pop # 提取最新工作并从栈删除$ git cherry-pick # 可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，                                    并作为一个新的提交引入到你当前分支上。$ git diff 具体修改了那些地方 git diff &lt;local branch&gt; &lt;remote&gt;/&lt;remote branch&gt;对比远程分支$ git remote：管理主机名    不带参数 -列出所有远程主机    -v 参看远程主机的网址    -show &lt;主机名&gt;查看详细信息忽略文件：创建一个名为 .gitignore的文件，列出要忽略的文件模式。如：*.a       #忽略所有 .a 结尾的文件    !lib.a    #但 lib.a 除外</code></pre><h3 id="常见误操作处理方法"><a href="#常见误操作处理方法" class="headerlink" title="常见误操作处理方法"></a>常见误操作处理方法</h3><pre><code>撤销 add：git reset HEAD合并 commit：    1. 追加至上一个 commit ：git commit --amend；commit 的时间是不会变的；可加上--no-edit    2. 合并多个：git rebase -i commit(-i 后参数可写commitHSAH值即你想合并至哪一个commit        或者-i HEAD~n(HEAD将它看做 你的上一次提交 的别名)HEAD~1 上个版本 HEAD~n 上n个版本)        - 紧接着进入vim界面：pick为保留，s或者squash为删除commit        - 又另一个vim界面：commit msg 保留自己需要的或者修改，用#删除别的commit msg如何重置某个文件到未修改的状态？  # git checkout -- &lt;filepath&gt;如何重置所有文件到未修改的状态？  # git reset --hard如何重置到某个 commit？          # git reset &lt;commit SHA&gt;git reset用于撤销未被提交到remote的改动，即撤销local的修改。除了移动当前分支的HEAD，还可以更改workspace和index：git reset --soft HEAD^上一个commit，想撤回俩个用HEAD~2：    --soft：修改HEAD，不修改index和workspace。    --mixed：修改HEAD和index，不修改workspace。默认行为。    --hard：修改HEAD、index、workspace。把index和workspace的修改全部撤销。</code></pre><h3 id="常见错误处理方法"><a href="#常见错误处理方法" class="headerlink" title="常见错误处理方法"></a>常见错误处理方法</h3><ul><li>git pull or push报错：fatal: refusing to merge unrelated histories （拒绝合并不相关的历史）</li></ul><p><code>则在pull命令后紧接着使用--allow-unrelated-history选项来解决问题（该选项可以合并两个独立启动仓库的历史）。</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>命令</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/10/17/hello-world/"/>
    <url>2019/10/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>helllo</tag>
      
      <tag>world</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录如何使用hexo搭建博客</title>
    <link href="undefined2019/10/17/%E8%AE%B0%E5%BD%95%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/10/17/%E8%AE%B0%E5%BD%95%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>hexo + GitHub pages 搭建博客流程</p><a id="more"></a><h3 id="一、hexo-amp-node-安装"><a href="#一、hexo-amp-node-安装" class="headerlink" title="一、hexo &amp; node 安装"></a>一、hexo &amp; node 安装</h3><p>npm install hexo-cli -g<br>npm install hexo-deployer-git –save<br>or 使用yarn</p><h3 id="二、-Hexo初始化配置"><a href="#二、-Hexo初始化配置" class="headerlink" title="二、 Hexo初始化配置"></a>二、 Hexo初始化配置</h3><p><strong>创建Hexo文件夹</strong><br>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><blockquote><p>$ hexo init</p></blockquote><p><strong>本地查看效果</strong><br>执行下面语句，执行完即可登录localhost:4000查看效果</p><blockquote><p>hexo generate<br>hexo server</p></blockquote><h3 id="三、-将博客部署到Github-Pages上"><a href="#三、-将博客部署到Github-Pages上" class="headerlink" title="三、 将博客部署到Github Pages上"></a>三、 将博客部署到Github Pages上</h3><p><strong>创建项目代码库</strong></p><ol><li>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。</li><li>创建要点如下：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7492a1849?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" srcset="/img/loading.gif" alt="如图"></li></ol><p><strong>配置SSH密钥</strong></p><ol><li>创建一对新的SSH密钥(keys)</li></ol><blockquote><p>$ssh-keygen -t rsa -C “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“<br>#这将按照你提供的邮箱地址，创建一对密钥<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</p></blockquote><p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p><ol start="2"><li>在GitHub账户中添加你的公钥</li><li>测试</li></ol><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>的部分不要修改：</p><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>出现 yes/no ？ 输入yes</p><ol start="4"><li>设置用户信息</li></ol><blockquote><p>$ git config –global user.name “username” //用户名</p></blockquote><blockquote><p>$ git config –global user.email  “<a href="mailto:liji.anchang@163.com" target="_blank" rel="noopener">liji.anchang@163.com</a>“ //填写自己的邮箱</p></blockquote><h3 id="四、-将本地的Hexo文件更新到Github的库中"><a href="#四、-将本地的Hexo文件更新到Github的库中" class="headerlink" title="四、 将本地的Hexo文件更新到Github的库中"></a>四、 将本地的Hexo文件更新到Github的库中</h3><ol><li>复制项目 GitHub 地址</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c77a882a00?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" srcset="/img/loading.gif" alt="如图"></p><ol start="2"><li><p>打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件</p></li><li><p>在配置文件里作如下修改，保存</p></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c78dc8dca4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" srcset="/img/loading.gif" alt="如图"></p><ol start="4"><li>在Hexo文件夹下执行<blockquote><p>hexo g<br>hexo d</p></blockquote></li></ol><p>或者</p><blockquote><p>hexo g -d</p></blockquote><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：luoyangyang369.github.io)。</p><p>假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>这样，你再执行hexo g -d，你的博客就部署到Github上了。</p><ol start="5"><li>在浏览器上输入自己的主页地址即可访问</li></ol><h3 id="五、美化自己博客"><a href="#五、美化自己博客" class="headerlink" title="五、美化自己博客"></a>五、美化自己博客</h3><ol><li>进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo的官网主题专栏</a></li><li>克隆主题<br>再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入:<blockquote><p>git clone <a href="https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)</a> </p></blockquote></li><li>修改Hexo配置文件</li></ol><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml<br>修改参数为：theme: hexo-theme-next</p><ol start="4"><li><p>部署主题，本地查看效果</p><blockquote><p>hexo -g =&gt; hexo -s<br>简写：hexo server -g</p></blockquote></li><li><p>如果效果满意，将它部署到Github上</p></li></ol><blockquote><p>hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)<br>hexo g -d</p></blockquote><h3 id="六、-在博客写文章"><a href="#六、-在博客写文章" class="headerlink" title="六、 在博客写文章"></a>六、 在博客写文章</h3><ol><li>用hexo发表新文章<blockquote><p>$ hexo n “文章标题”</p></blockquote></li></ol><p>其中 我的家 为文章标题，执行命令 hexo n “我的家” 后，会在项目 \Hexo\source_posts 中生成 我的家.md文件，用编辑器打开编写即可。</p><p>当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。<br>写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p><blockquote><p>$ hexo g #生成</p></blockquote><blockquote><p>$ hexo d #部署 # 可与hexo g合并为 hexo d -g</p></blockquote><ol start="2"><li>用 <a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown</a> 写文章</li></ol><p>我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。</p><p>找一篇自己写过的 markdown 文章复制进去之后，只要执行</p><blockquote><p>$ hexo d -g</p></blockquote><p>推送至我们的Github仓库即可。</p><h3 id="七、-将自己的域名关联到Github-Pages上"><a href="#七、-将自己的域名关联到Github-Pages上" class="headerlink" title="七、 将自己的域名关联到Github Pages上"></a>七、 将自己的域名关联到Github Pages上</h3><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://juejin.im/entry/5a574864f265da3e3c6c1217" target="_blank" rel="noopener">2018，你该搭建自己的博客了！</a><br><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/" target="_blank" rel="noopener">使用指南</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>